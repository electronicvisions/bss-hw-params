@Library("jenlib@ebrains-4.0") _

try {
	withCcache() {
		wafDefaultPipeline(projects: ["bss-hw-params"],
		                   setupOptions: "--release-branch=ebrains-4.0",
		                   container: [app: "dls-nodev"],
		                   notificationChannel: "#jenkins-trashbin")  // success checked globally
	}

	runOnSlave(label: "frontend") {
		cleanWs()
	}

	withCcache() {
		wafDefaultPipeline(projects: ["bss-hw-params"],
		                   setupOptions: "--release-branch=ebrains-4.0",
		                   container: [image: getAsicContainer()],
		                   notificationChannel: "#jenkins-trashbin", // success checked globally
		                   enableClangFormat: false) // not available in ASIC container
	}
} catch (Throwable t) {
	notifyFailure(mattermostChannel: "#softies")
	throw t
}

if (currentBuild.currentResult != "SUCCESS") {
	notifyFailure(mattermostChannel: "#softies")
}

/**
 * Compute the ASIC container image to be used.
 * @return Path to the container image
 */
String getAsicContainer() {
	return getDefaultFixturePath(defaultPathCanonical: "/containers/stable/asic_latest",
	                             commitKey: "In-ASIC-Container",
	                             parameterName: "OVERWRITE_DEFAULT_ASIC_CONTAINER_IMAGE")
}
